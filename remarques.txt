
random() is uniform:
  The chance of landing below w is exactly w (e.g., 60% of the range = 60% probability).
  The chance of landing above w is 1 - w (40%).



for version mutation and stagnation pso we could : 
- for centroid : Pour une approche plus précise, tu pourrais aussi inclure les machines dans la mesure de la diversité.
- calcul de diversite : la distance de Hamming ou la distance de Kendall tau plus appropriée que eucidienne pour les problemes de swaps 
ou les indices doivent etre respectes :
      La distance de Hamming est bien adaptée pour comparer des séquences discrètes,
       comme les positions dans ton PSO pour le JSSP, car elle compte le nombre de positions différentes entre deux séquences.

for stagnation : 
- only 1/5 of worst particles is considered
- Le nombre de perturbations appliquées est déterminé en fonction de la longueur 
de la position de la solution (len(global_best_position) // 5), mais ne sera jamais inférieur à 1.

for perturbe :
  MIN_W = 0.2
  MAX_MUTATION = 0.6
  MAX_ATTEMPTS = 50


update velocity :
  has mutation rate in parmaters
  

# Update particles
            for particle in particles:
                particle.update_velocity(
                    global_best_position, current_w, c1, c2, mutation_rate
                )
                particle.update_position()
                particle.apply_mutation(current_mutation)

early stopping :
  not working with it 
  improvement_threshold
  

particle initilization:
  max_velocity_size: int = None,


diversity intuitions :
  - detect stagnation with diversity 
          diversity = self.calculate_diversity(particles)
          self.diversity_history.append(diversity)

          if diversity < DIVERSITY_THRESHOLD:
              print(f"Low diversity detected at iteration {iteration}, triggering diversification...")
              self.handle_stagnation(particles, global_best_position)

  - adapt pso parmaters with diversity:
      if adaptive_params:
        diversity = self.diversity_history[-1]
        current_w = max(MIN_W, w * (diversity / len(particles[0].position)))
        current_mutation = min(MAX_MUTATION, mutation_rate * (1 + (1 - diversity / len(particles[0].position))))

  - mutation based on diversity :
      if diversity < DIVERSITY_THRESHOLD:
         for p in random.sample(particles, len(particles) // 4):
         p.apply_mutation(rate=HIGH_MUTATION_RATE)
